CREATE DATABASE BANK;
USE BANK;


CREATE OR REPLACE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants	INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;

CREATE OR REPLACE  TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
`Date` DATE ,
Account_type VARCHAR(40),
Card_Assigned VARCHAR(40),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE `ORDER`(
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE LOAN(
loan_id	INT ,
account_id	INT,
`Date`	DATE,
amount	INT,
duration	INT,
payments	INT,
`status` VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

CREATE OR REPLACE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
`Date`	DATE,
`Type`	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
`account` INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));

CREATE OR REPLACE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE OR REPLACE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
`type` CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);

CREATE OR REPLACE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
`type` CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);



----------------------------------------------------AWS (S3) INTEGRATION------------------------------------------------------------------------
CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::098678939641:role/Bank_Roles' 
STORAGE_ALLOWED_LOCATIONS =('s3://bankrawdata/'); 

DESC integration s3_int;


CREATE OR REPLACE STAGE BANK
URL ='s3://bankrawdata'
file_format = CSV
storage_integration = s3_int;

LIST @BANK;

--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.


CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ACCOUNT" --yourdatabase -- your schema ---your table
FROM '@BANK/ACCOUNT/' --s3 bucket subfolde4r name
FILE_FORMAT = CSV; --YOUR CSV FILE FORMAT NAME

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CARD"
FROM '@BANK/CARD/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CLIENT"
FROM '@BANK/CLIENT/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISPOSITION"
FROM '@BANK/DISPOSITION/' 
FILE_FORMAT = CSV;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISTRICT"
FROM '@BANK/DISTRICT/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN  AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."LOAN"
FROM '@BANK/LOAN/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS  AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/TRANSACTIONS/' 
FILE_FORMAT = CSV;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER  AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."`ORDER`"
FROM '@BANK/ORDER/'
FILE_FORMAT = CSV;

SHOW PIPES;

SELECT COUNT(*) FROM ACCOUNT;
SELECT COUNT(*) FROM CARD;
SELECT COUNT(*) FROM CLIENT;
SELECT COUNT(*) FROM DISPOSITION;
SELECT COUNT(*) FROM DISTRICT;
SELECT COUNT(*) FROM LOAN;
SELECT COUNT(*) FROM TRANSACTIONS;
SELECT COUNT(*) FROM BANK.PUBLIC."`ORDER`";
----------------------------------------------------------PIPEREFRESH-----------------------------------------------------------------

ALTER PIPE BANK_SNOWPIPE_ACCOUNT refresh;

ALTER PIPE  BANK_SNOWPIPE_CARD refresh;
ALTER PIPE  BANK_SNOWPIPE_CLIENT refresh;
ALTER PIPE  BANK_SNOWPIPE_DISTRICT refresh;
ALTER PIPE  BANK_SNOWPIPE_LOAN refresh;
ALTER PIPE  BANK_SNOWPIPE_TRANSACTIONS refresh;
ALTER PIPE  BANK_SNOWPIPE_ORDER refresh;



SELECT * FROM BANK.PUBLIC.ACCOUNT  LIMIT 1;
SELECT   * FROM CARD;
SELECT   * FROM CLIENT; 
SELECT   * FROM DISPOSITION LIMIT 1;
SELECT   * FROM DISTRICT LIMIT 1;
SELECT   * FROM LOAN LIMIT 1;
SELECT   * FROM TRANSACTIONS LIMIT 1;
SELECT   * FROM BANK.PUBLIC."`ORDER`" LIMIT 1;


-----ADDING AGE COLUMN TO THE CLIENT TABLE
ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE = DATEDIFF('YEAR',BIRTH_DATE,'2022-12-31');

------------------------

SELECT YEAR(`DATE`) AS TXT_YRS,COUNT(*) AS TOT_TXNS FROM TRANSACTIONS
GROUP BY 1
ORDER BY 1 DESC;


SELECT MIN(`DATE`),MAX(`DATE`) FROM TRANSACTIONS;
---======

--NEXT DATA TRANSFORMATION
/*
 CONVERT 2021 TXN_YEAR TO 2022
 CONVERT 2020 TXN_YEAR TO 2021
 CONVERT 2019 TXN_YEAR TO 2020
 CONVERT 2018 TXN_YEAR TO 2019
 CONVERT 2017 TXN_YEAR TO 2018
 CONVERT 2016 TXN_YEAR TO 2017


*/


UPDATE TRANSACTIONS SET `DATE` = DATEADD(YEAR,1,`DATE`)
WHERE YEAR(`DATE`) = 2016;


---========================
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL ;

UPDATE TRANSACTIONS SET BANK = 'ADB Bank'
WHERE YEAR(`DATE`) = 2017 and BANK IS NULL;


--======
select distinct year(issued) from card;
select distinct YEAR(`DATE`) from account;


UPDATE card SET issued = DATEADD(YEAR,1,issued)
WHERE YEAR(issued) = 2016;


---1 CZK = 0.046735 USD-----------------------
---1 CZK = 3.836706 INR-----------------------------

---1.What is the demographic profile of the bank's clients and how does it vary across districts?

create or replace table czec_demographic_data_kpi as
SELECT  C.DISTRICT_ID,D.DISTRICT_NAME,D.AVERAGE_SALARY,
ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT ,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS MALE_FEMALE_RATIO_PERC,
COUNT(*)AS TOTAL_CLIENT
FROM CLIENT C
INNER JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3
ORDER BY 1;

--2. How the banks have performed over the years. Give their detailed analysis year & month-wise.
SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE ;

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

--ASSUMING EVERY LAST MONTH CUSTOMER ACCOUNT IS GETTING TXNCTED

CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(`DATE`) AS TXN_YEAR,
   MONTH(`DATE`) AS TXN_MONTH,
   MAX(`DATE`) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.`DATE` = LTD.LATEST_TXN_DATE
WHERE TXN.`TYPE` = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;


--What are the most common types of accounts and how do they differ in terms of usage and profitability?
  SELECT
  ACC.ACCOUNT_TYPE,
  ACC.FREQUENCY,
  COUNT(*) AS NUM_OF_TRANSACTIONS,
  SUM(TXN.AMOUNT) AS AMOUNT_IN_CZK,
  ROUND(SUM(TXN.AMOUNT*3.836706), 2) AS CHARGES_IN_INR,
  ROUND(SUM(TXN.AMOUNT*0.046735), 2) AS CHARGES_IN_USD,
  ROUND(AVG(TXN.AMOUNT*3.836706),2) AS AVG_AMOUNT_INR
FROM
  ACCOUNT ACC
  INNER JOIN TRANSACTIONS TXN ON ACC.ACCOUNT_ID = TXN.ACCOUNT_ID
GROUP BY
  ACC.ACCOUNT_TYPE,
  ACC.FREQUENCY
ORDER BY
  ACC.ACCOUNT_TYPE;

  -- Which types of cards are most frequently used by the bank's clients and what is the overall profitability of the credit card business?

SELECT
  CARD.`TYPE` AS CARD_TYPE,
  COUNT(TRANS.TRANS_ID) AS NUM_OF_TRANSACTIONS,
  SUM(TRANS.AMOUNT) AS TOTAL_AMOUNT,
  AVG(TRANS.AMOUNT) AS AVG_AMOUNT
FROM
  CARD
  INNER JOIN DISPOSITION  disp  ON CARD.DISP_ID = DISP.DISP_ID
  INNER JOIN ACCOUNT ON DISP.ACCOUNT_ID = ACCOUNT.ACCOUNT_ID
  INNER JOIN TRANSACTIONS TRANS ON ACCOUNT.ACCOUNT_ID = TRANS.ACCOUNT_ID
WHERE
  CARD.`TYPE` IS NOT NULL
GROUP BY
  CARD.`TYPE`
ORDER BY
  NUM_OF_TRANSACTIONS DESC;


WITH CardUsage AS (
  SELECT
    C.`TYPE` AS CARD_TYPE,
    COUNT(*) AS NUM_OF_TRANSACTIONS
  FROM
    CARD C
    INNER JOIN DISPOSITION D ON C.DISP_ID = D.DISP_ID
    INNER JOIN TRANSACTIONS T ON D.ACCOUNT_ID = T.ACCOUNT_ID
  GROUP BY
    C.`TYPE`
  ORDER BY
    NUM_OF_TRANSACTIONS DESC
),
CreditCardProfitability AS (
  SELECT
    C.`TYPE` AS CARD_TYPE,
    SUM(CASE
      WHEN T.BALANCE > 300000 THEN T.BALANCE * 0.05
      WHEN T.BALANCE BETWEEN 100000 AND 300000 THEN T.BALANCE * 0.03
      ELSE 0
    END) AS PROFIT
  FROM
    CARD C
    INNER JOIN DISPOSITION D ON C.DISP_ID = D.DISP_ID
    INNER JOIN TRANSACTIONS T ON D.ACCOUNT_ID = T.ACCOUNT_ID
  GROUP BY
    C.`TYPE`
  ORDER BY
    PROFIT DESC
)

SELECT
  CU.CARD_TYPE,
  CU.NUM_OF_TRANSACTIONS,
  COALESCE(CP.PROFIT, 0) AS PROFIT
FROM
  CardUsage CU
  LEFT JOIN CreditCardProfitability CP ON CU.CARD_TYPE = CP.CARD_TYPE;



  SELECT MAX(BALANCE) FROM TRANSACTIONS;
